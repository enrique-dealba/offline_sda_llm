from datetime import datetime
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class BasicLLMResponse(BaseModel):
    response: str = Field(..., description="The main response from the LLM")


class DetailedLLMResponse(BaseModel):
    response: str = Field(..., description="The main response from the LLM")
    sources: Optional[List[str]] = Field(
        None, description="Sources or references for the response"
    )
    confidence: float = Field(
        ..., ge=0, le=1, description="Confidence score of the response"
    )


class EvidenceLLMResponse(BaseModel):
    response: str = Field(..., description="The main response from the LLM")
    evidence: List[str] = Field(
        ...,
        description="Verbatim JSON key-value pairs supporting the response. Format: 'key: value'. Use dot notation for nested structures, e.g., 'status_counts.FAILED: 3'.",
    )
    confidence: float = Field(
        ..., ge=0, le=1, description="Confidence score of the response"
    )


class ObjectiveType(BaseModel):
    objective_name: str = Field(
        ...,
        description="Type of objective being specified. Choose from: CatalogMaintenanceObjective, PeriodicRevisitObjective, SearchObjective, DataEnrichmentObjective, GeodssRevisitObjective, SensorCheckoutObjective, SingleIntentObjective, UctObservationObjective, BaselineAutonomyObjective",
    )


class CatalogMaintenanceObjective(BaseModel):
    classification_marking: str = Field(
        ...,
        description="Classification level of objective intents. Choose from: U, C, S, TS, U//FOUO",
    )
    data_mode: str = Field(
        ...,
        description="String type for the Machina Common DataModeType. Choose from: TEST, REAL, SIMULATED, EXERCISE",
    )
    collect_request_type: str = Field(
        "RATE_TRACK_SIDEREAL",
        description="Collect request type of tracking type. Choose from: RATE_TRACK, SIDEREAL, RATE_TRACK_SIDEREAL. Defaults to RATE_TRACK_SIDEREAL. Note: do NOT confuse RATE_TRACK with RATE_TRACK_SIDEREAL",
    )
    orbital_regime: Optional[str] = Field(
        None,
        description="Orbital regime classification for this catalog maintenance objective. Choose from: LEO, MEO, GEO, XGEO",
    )
    patience_minutes: int = Field(
        30,
        description="Amount of time in minutes to wait before assuming an intent has failed, defaults to 30",
    )
    end_time_offset_minutes: int = Field(
        20,
        description="Number of minutes into the future to schedule this intent, defaults to 20",
    )
    priority: int = Field(
        999,
        description="Priority level for scheduling (higher numbers indicate lower priority, defaults to 999)",
    )
    sensor_name_list: Optional[List[str]] = Field(
        None,
        description="List of sensor names to be used",
    )
    rso_id_list: Optional[List[str]] = Field(
        default=[],
        description="Optional list of RSO IDs",
    )
    objective_start_time: Optional[datetime] = Field(
        None,
        description="Start time of the objective in ISO 8601 format with timezone",
    )
    objective_end_time: Optional[datetime] = Field(
        None,
        description="End time of the objective in ISO 8601 format with timezone",
    )
    objective_uuid: Optional[str] = Field(
        None,
        description="Objective UUID generated by the belief state",
    )
    frame_type: str = Field(
        "LIGHT",
        description="Frame type for the objective. Default is LIGHT",
    )
    binning: Optional[int] = Field(
        None,
        description="ImagerInstrument intent parameters",
    )
    visibility_check: bool = Field(
        False,
        description="Flag to determine RSO visibility before intent generation",
    )
    objective_name: Optional[str] = Field(
        "CatalogMaintenanceObjective",
        description="Name for this objective. Defaults to 'CatalogMaintenanceObjective'",
    )


class PeriodicRevisitObjective(BaseModel):
    classification_marking: str = Field(
        ...,
        description="Classification level of objective intents. Choose from: U, C, S, TS, U//FOUO",
    )
    target_id_list: List[str] = Field(
        ...,
        description="List of belief state UUID's of Targets",
    )
    sensor_name_list: List[str] = Field(
        ...,
        description="Name of sensor(s) to perform periodic revisit with",
    )
    data_mode: str = Field(
        ...,
        description="String type for the Machina Common DataModeType. Choose from: TEST, REAL, SIMULATED, EXERCISE",
    )
    collect_request_type: str = Field(
        "RATE_TRACK_SIDEREAL",
        description="Collect request type of tracking type. Choose from: RATE_TRACK, SIDEREAL, RATE_TRACK_SIDEREAL. Defaults to RATE_TRACK_SIDEREAL. Note: do NOT confuse RATE_TRACK with RATE_TRACK_SIDEREAL",
    )
    frame_type: str = Field(
        "LIGHT",
        description="Frame type for the objective. Default is LIGHT",
    )
    visibility_check: bool = Field(
        False,
        description="Flag to determine RSO visibility before intent generation",
    )
    patience_minutes: int = Field(
        30,
        description="Amount of time in minutes to wait before assuming an intent has failed, defaults to 30",
    )
    revisits_per_hour: Optional[float] = Field(
        None,
        description="Desired number of times to observe each target each hour",
    )
    number_of_frames: Optional[int] = Field(
        None,
        description="Amount of frames per intent",
    )
    integration_time: Optional[float] = Field(
        None,
        description="Seconds of integration time per frame",
    )
    binning: Optional[int] = Field(
        None,
        description="ImagerInstrument intent parameters",
    )
    objective_start_time: Optional[datetime] = Field(
        None,
        description="Start time of the objective in ISO 8601 format with timezone. Note: do NOT confuse 'objective' with 'intent'",
    )
    objective_end_time: Optional[datetime] = Field(
        None,
        description="End time of the objective in ISO 8601 format with timezone. Note: do NOT confuse 'objective' with 'intent'",
    )
    priority: int = Field(
        10,
        description="Priority level for scheduling (higher numbers indicate lower priority, defaults to 10)",
    )
    ignore_other_objective_intent_submissions: bool = Field(
        False,
        description="Don't worry about previous intent submissions by other objectives",
    )
    optimal_frames_per_hour: int = Field(
        400,
        description="Default optimistic number of frames per hour of operations",
    )
    objective_uuid: Optional[str] = Field(
        None,
        description="Objective UUID generated by the belief state",
    )
    intent_start_time: Optional[datetime] = Field(
        None,
        description="The earliest time when the intents should be submitted for. Note: do NOT confuse 'objective' with 'intent'",
    )
    intent_end_time: Optional[datetime] = Field(
        None,
        description="The latest time when the intents should be submitted for. Note: do NOT confuse 'objective' with 'intent'",
    )
    objective_name: Optional[str] = Field(
        "PeriodicRevisitObjective",
        description="Name for this objective. Defaults to 'PeriodicRevisitObjective'",
    )


class DataEnrichmentObjective(BaseModel):
    classification_marking: str = Field(
        ...,
        description="Classification level of objective intents. Choose from: U, C, S, TS, U//FOUO",
    )
    data_mode: str = Field(
        ...,
        description="String type for the Machina Common DataModeType. Choose from: TEST, REAL, SIMULATED, EXERCISE",
    )
    objective_uuid: Optional[str] = Field(
        None,
        description="Objective UUID generated by the belief state",
    )
    target_id_list: Optional[List[str]] = Field(
        None,
        description="List of belief state UUID's of Targets",
    )
    sensor_name_list: Optional[List[str]] = Field(
        None,
        description="Name of sensor(s) to perform periodic revisit with",
    )
    collect_request_type: str = Field(
        "RATE_TRACK_SIDEREAL",
        description="Collect request type of tracking type. Choose from: RATE_TRACK, SIDEREAL, RATE_TRACK_SIDEREAL. Defaults to RATE_TRACK_SIDEREAL. Note: do NOT confuse RATE_TRACK with RATE_TRACK_SIDEREAL",
    )
    frame_type: str = Field(
        "LIGHT",
        description="Frame type for the objective. Default is LIGHT",
    )
    binning: Optional[int] = Field(
        None,
        description="ImagerInstrument intent parameters",
    )
    max_rso_to_observe: int = Field(
        6,
        description="Number of RSOs to observe. Defaults to 6",
    )
    revisits_per_hour: float = Field(
        12.0,
        description="Desired number of times to observe each target each hour",
    )
    objective_start_time: Optional[datetime] = Field(
        None,
        description="Start time of the objective in ISO 8601 format with timezone. Note: do NOT confuse 'objective' with 'intent'",
    )
    objective_end_time: Optional[datetime] = Field(
        None,
        description="End time of the objective in ISO 8601 format with timezone. Note: do NOT confuse 'objective' with 'intent'",
    )
    priority: int = Field(
        20,
        description="Priority level for scheduling (higher numbers indicate lower priority, defaults to 20)",
    )
    intent_start_time: Optional[datetime] = Field(
        None,
        description="The earliest time when the intents should be submitted for. Note: do NOT confuse 'objective' with 'intent'",
    )
    intent_end_time: Optional[datetime] = Field(
        None,
        description="The latest time when the intents should be submitted for. Note: do NOT confuse 'objective' with 'intent'",
    )
    visibility_check: bool = Field(
        True,
        description="Flag to determine RSO visibility before intent generation",
    )
    objective_name: Optional[str] = Field(
        "DataEnrichmentObjective",
        description="Name for this objective. Defaults to 'DataEnrichmentObjective'. Note: Do NOT confuse DataEnrichmentObjective with PeriodicRevisitObjective",
    )


class SearchObjective(BaseModel):
    classification_marking: str = Field(
        ...,
        description="Classification level of objective intents. Choose from: U, C, S, TS, U//FOUO",
    )
    target_id: str = Field(
        ...,
        description="Belief State Target UUID",
    )
    sensor_name: str = Field(
        ...,
        description="Name of Sensor to perform search",
    )
    search_type: str = Field(
        "ALONG_TRACK",
        description="Type of Search pattern to execute. Must be a valid SearchType value",
    )
    data_mode: str = Field(
        ...,
        description="String type for the Machina Common DataModeType. Choose from: TEST, REAL, SIMULATED, EXERCISE",
    )
    collect_request_type: str = Field(
        "RATE_TRACK_SIDEREAL",
        description="Collect request type of tracking type. Choose from: RATE_TRACK, SIDEREAL, RATE_TRACK_SIDEREAL. Defaults to RATE_TRACK_SIDEREAL. Note: do NOT confuse RATE_TRACK with RATE_TRACK_SIDEREAL",
    )
    frame_type: str = Field(
        "LIGHT",
        description="Frame type for the objective. Default is LIGHT",
    )
    visibility_check: bool = Field(
        False,
        description="Flag to determine RSO visibility before intent generation",
    )
    initial_offset: int = Field(
        30,
        description="Seconds before RSO's current state to start search. Must not exceed 1800 seconds",
    )
    final_offset: int = Field(
        30,
        description="Seconds after RSO's current state to start search. Must not exceed 1800 seconds",
    )
    frame_overlap_percentage: float = Field(
        0.5,
        description="Percentage of frame overlap (0.0 to 1.0). Must be between 0 and 1",
    )
    end_time_offset_minutes: int = Field(
        20,
        description="Number of minutes into the future to schedule this intent",
    )
    priority: int = Field(
        1,
        description="Priority level for scheduling (higher numbers indicate lower priority, defaults to 1)",
    )
    binning: Optional[int] = Field(
        None,
        description="ImagerInstrument intent parameters",
    )
    objective_uuid: Optional[str] = Field(
        None,
        description="Objective UUID generated by the belief state",
    )
    objective_start_time: Optional[datetime] = Field(
        None,
        description="Start time of the objective in ISO 8601 format with timezone",
    )
    objective_end_time: Optional[datetime] = Field(
        None,
        description="End time of the objective. Defaults to now(UTC) + 10 minutes if not provided",
    )
    number_of_frames: Optional[int] = Field(
        None,
        description="Amount of frames per intent",
    )
    integration_time: Optional[float] = Field(
        None,
        description="Seconds of integration time per frame",
    )
    search_start_time: Optional[datetime] = Field(
        None,
        description="Search start time, calculated as objective_start_time + 15 minutes automatically",
    )
    objective_name: Optional[str] = Field(
        "SearchObjective",
        description="Name for this objective. Defaults to 'SearchObjective'",
    )


class GeodssRevisitObjective(BaseModel):
    classification_marking: str = Field(
        ...,
        description="Classification level of objective intents. Choose from: U, C, S, TS, U//FOUO",
    )
    target_id_list: List[str] = Field(
        ...,
        description="List of belief state UUID's of Targets",
    )
    sensor_name_list: List[str] = Field(
        ...,
        description="Name of sensor(s) to perform periodic revisit with",
    )
    data_mode: str = Field(
        "REAL",
        description="String type for the Machina Common DataModeType. Choose from: TEST, REAL, SIMULATED, EXERCISE",
    )
    collect_request_type: str = Field(
        "RATE_TRACK_SIDEREAL",
        description="Collect request type of tracking type. Choose from: RATE_TRACK, SIDEREAL, RATE_TRACK_SIDEREAL. Note: do NOT confuse RATE_TRACK with RATE_TRACK_SIDEREAL",
    )
    frame_type: str = Field(
        "LIGHT",
        description="Frame type for the objective",
    )
    visibility_check: bool = Field(
        False,
        description="Flag to determine RSO visibility before intent generation",
    )
    patience_minutes: int = Field(
        30,
        description="Amount of time in minutes to wait before assuming an intent has failed",
    )
    revisits_per_hour: Optional[float] = Field(
        None,
        description="Desired number of times to observe each target each hour",
    )
    number_of_frames: Optional[int] = Field(
        None,
        description="Amount of frames per intent",
    )
    integration_time: Optional[float] = Field(
        None,
        description="Seconds of integration time per frame",
    )
    objective_uuid: Optional[str] = Field(
        None,
        description="Objective UUID generated by the belief state",
    )
    objective_start_time: Optional[datetime] = Field(
        None,
        description="Start time of the objective in ISO 8601 format with timezone. Note: do NOT confuse 'objective' with 'intent'",
    )
    objective_end_time: Optional[datetime] = Field(
        None,
        description="End time of the objective in ISO 8601 format with timezone. Note: do NOT confuse 'objective' with 'intent'",
    )
    intent_start_time: Optional[datetime] = Field(
        None,
        description="The earliest time when the intents should be submitted for. Note: do NOT confuse 'objective' with 'intent'",
    )
    intent_end_time: Optional[datetime] = Field(
        None,
        description="The latest time when the intents should be submitted for. Note: do NOT confuse 'objective' with 'intent'",
    )
    priority: int = Field(
        10,
        description="Priority level for scheduling (higher numbers indicate lower priority, defaults to 10)",
    )
    ignore_other_objective_intent_submissions: bool = Field(
        False,
        description="Don't worry about previous intent submissions by other objectives",
    )
    optimal_frames_per_hour: int = Field(
        400,
        description="Default optimistic number of frames per hour of operations",
    )
    acquisition_type: int = Field(
        0,
        description="Track Command acquisitionType (0=Auto Sidereal, 1=Manual Sidereal, 2=Auto Rate Track)",
    )
    auto_track_type: int = Field(
        0,
        description="Track Command acquisitionType (0=No Autotrack, 1=Automatic, 2=Manual)",
    )
    auto_track_roi_position: int = Field(
        0,
        description="Track Command Autotrack ROI Position (0=Optical Boresite, 1=PMT Boresite)",
    )
    camera_mode: int = Field(
        0,
        description="Track Command Camera Mode (0=Normal, 1=Zoomed EBS, 2=Binned CCD)",
    )
    observation_interval: float = Field(
        0.0,
        description="Track Command Observation Interval",
    )
    num_observations: int = Field(
        1,
        description="Track Command Number of Observations",
    )
    num_skip_frames: int = Field(
        0,
        description="Track Command Number of frames to skip",
    )
    readout_rate_setting: int = Field(
        1,
        description="Track Command Readout Rate for CCD (0=1MHz, 1=2MHz)",
    )
    gain_setting: int = Field(
        0,
        description="Track Command Gain for CCD (0=High Gain, 1=Low Gain)",
    )
    rate_track_verify: int = Field(
        0,
        description="Track Command Rate Track Verify (0=No Verify, 1=Verify)",
    )
    soi_filter_position: int = Field(
        0,
        description="SOI Filter Position (0=Open, 1=1% Light, 2=10% Light)",
    )
    array_kind: int = Field(
        0,
        description="CCD Camera Command Array Kind (0=Main, 1=Photometer)",
    )
    binning_mode: int = Field(
        0,
        description="CCD Camera Command Binning Mode (0=No Binning, 1=HW Binning)",
    )
    scan_mode: int = Field(
        1,
        description="CCD Camera Command Scan Mode (0=Continuous, 1=Single Frame)",
    )
    overscan: int = Field(
        0,
        description="CCD Camera Command overscan (0=Normal, 1=Calibration)",
    )
    command: int = Field(
        0,
        description="CCD Camera Command (0=Configure, 1=Start, 2=Stop, 3=Reset, 4=Calibration)",
    )
    objective_name: Optional[str] = Field(
        "GeodssRevisitObjective",
        description="Name for this objective. Defaults to 'GeodssRevisitObjective'",
    )


class SensorCheckoutObjective(BaseModel):
    classification_marking: str = Field(
        ...,
        description="Classification level of objective intents. Choose from: U, C, S, TS, U//FOUO",
    )
    sensor_name: str = Field(
        ...,
        description="Name of sensor to perform skill with",
    )
    orbital_regime: str = Field(
        "GEO",
        description="Orbital regime classification. Choose from: LEO, MEO, GEO, XGEO",
    )
    data_mode: str = Field(
        "REAL",
        description="String type for the Machina Common DataModeType. Choose from: TEST, REAL, SIMULATED, EXERCISE",
    )
    collect_request_type: str = Field(
        "RATE_TRACK_SIDEREAL",
        description="Collect request type of tracking type. Choose from: RATE_TRACK, SIDEREAL, RATE_TRACK_SIDEREAL. Note: do NOT confuse RATE_TRACK with RATE_TRACK_SIDEREAL",
    )
    frame_type: str = Field(
        "LIGHT",
        description="Frame type for the objective",
    )
    visibility_check: bool = Field(
        True,
        description="Flag to determine RSO visibility before intent generation",
    )
    patience_minutes: int = Field(
        30,
        description="Amount of time in minutes to wait before assuming an intent has failed",
    )
    revisits_per_hour: float = Field(
        1.0,
        description="Desired number of times to observe each target each hour",
    )
    number_of_frames: Optional[int] = Field(
        None,
        description="Amount of frames per intent",
    )
    integration_time: Optional[float] = Field(
        None,
        description="Seconds of integration time per frame",
    )
    binning: Optional[int] = Field(
        None,
        description="ImagerInstrument intent parameters",
    )
    objective_uuid: Optional[str] = Field(
        None,
        description="Objective UUID generated by the belief state",
    )
    objective_start_time: Optional[datetime] = Field(
        None,
        description="Start time of the objective in ISO 8601 format with timezone. Note: do NOT confuse 'objective' with 'intent'",
    )
    objective_end_time: Optional[datetime] = Field(
        None,
        description="End time of the objective in ISO 8601 format with timezone. Note: do NOT confuse 'objective' with 'intent'",
    )
    intent_start_time: Optional[datetime] = Field(
        None,
        description="The earliest time when the intents should be submitted for. Note: do NOT confuse 'objective' with 'intent'",
    )
    intent_end_time: Optional[datetime] = Field(
        None,
        description="The latest time when the intents should be submitted for. Note: do NOT confuse 'objective' with 'intent'",
    )
    priority: int = Field(
        10,
        description="Priority level for scheduling (higher numbers indicate lower priority, defaults to 10)",
    )
    objective_name: Optional[str] = Field(
        "SensorCheckoutObjective",
        description="Name for this objective. Defaults to 'SensorCheckoutObjective'",
    )


class SingleIntentObjective(BaseModel):
    classification_marking: str = Field(
        ...,
        description="Classification level of objective intents. Choose from: U, C, S, TS, U//FOUO",
    )
    target_id: Optional[str] = Field(
        None,
        description="Target UUID from the belief state",
    )
    rso_id: Optional[str] = Field(
        None,
        description="RSO UUID from the belief state",
    )
    sensor_name_list: Optional[List[str]] = Field(
        None,
        description="Name of sensor(s) to perform periodic revisit with",
    )
    data_mode: str = Field(
        "REAL",
        description="String type for the Machina Common DataModeType. Choose from: TEST, REAL, SIMULATED, EXERCISE",
    )
    collect_request_type: str = Field(
        "RATE_TRACK_SIDEREAL",
        description="Collect request type of tracking type. Choose from: RATE_TRACK, SIDEREAL, RATE_TRACK_SIDEREAL. Note: do NOT confuse RATE_TRACK with RATE_TRACK_SIDEREAL",
    )
    frame_type: str = Field(
        "LIGHT",
        description="Frame type for the objective",
    )
    number_of_frames: Optional[int] = Field(
        None,
        description="Amount of frames per intent",
    )
    integration_time: Optional[float] = Field(
        None,
        description="Seconds of integration time per frame",
    )
    priority: int = Field(
        10,
        description="Priority level for scheduling (higher numbers indicate lower priority, defaults to 10)",
    )
    binning: Optional[int] = Field(
        None,
        description="Camera binning settings",
    )
    intent_start_time: Optional[datetime] = Field(
        None,
        description="The earliest time when the intents should be submitted for. Note: do NOT confuse 'objective' with 'intent'",
    )
    intent_end_time: Optional[datetime] = Field(
        None,
        description="The latest time when the intents should be submitted for. Note: do NOT confuse 'objective' with 'intent'",
    )
    objective_uuid: Optional[str] = Field(
        None,
        description="Objective UUID generated by the belief state",
    )
    objective_start_time: Optional[datetime] = Field(
        None,
        description="Start time of the objective in ISO 8601 format with timezone. Note: do NOT confuse 'objective' with 'intent'",
    )
    objective_end_time: Optional[datetime] = Field(
        None,
        description="End time of the objective in ISO 8601 format with timezone. Note: do NOT confuse 'objective' with 'intent'",
    )
    objective_name: Optional[str] = Field(
        "SingleIntentObjective",
        description="Name for this objective. Defaults to 'SingleIntentObjective'",
    )


class UctObservationObjective(BaseModel):
    classification_marking: str = Field(
        ...,
        description="Classification level of objective intents. Choose from: U, C, S, TS, U//FOUO",
    )
    uct_rso_id_list: Optional[List[str]] = Field(
        None,
        description="List of UCT RSO UUIDs to keep track of",
    )
    sensor_name_list: Optional[List[str]] = Field(
        None,
        description="Name of sensor(s) to perform UCT observation with",
    )
    data_mode: str = Field(
        "REAL",
        description="String type for the Machina Common DataModeType. Choose from: TEST, REAL, SIMULATED, EXERCISE",
    )
    collect_request_type: str = Field(
        "RATE_TRACK_SIDEREAL",
        description="Collect request type of tracking type. Choose from: RATE_TRACK, SIDEREAL, RATE_TRACK_SIDEREAL. Note: do NOT confuse RATE_TRACK with RATE_TRACK_SIDEREAL",
    )
    frame_type: str = Field(
        "LIGHT",
        description="Frame type for the objective",
    )
    orbital_regime: Optional[str] = Field(
        None,
        description="Orbital regime classification. Choose from: LEO, MEO, GEO, XGEO",
    )
    visibility_check: bool = Field(
        True,
        description="Flag to determine RSO visibility before intent generation",
    )
    patience_minutes: int = Field(
        30,
        description="Amount of time in minutes to wait before assuming an intent has failed",
    )
    revisits_per_hour: float = Field(
        6.0,
        description="Desired number of times to observe UCTs each hour",
    )
    number_of_frames: Optional[int] = Field(
        None,
        description="Amount of frames per intent",
    )
    integration_time: Optional[float] = Field(
        None,
        description="Seconds of integration time per frame",
    )
    binning: Optional[int] = Field(
        None,
        description="ImagerInstrument intent parameters",
    )
    end_time_offset_minutes: int = Field(
        60,
        description="Number of minutes into the future to schedule this intent",
    )
    objective_uuid: Optional[str] = Field(
        None,
        description="Objective UUID generated by the belief state",
    )
    objective_start_time: Optional[datetime] = Field(
        None,
        description="Start time of the objective in ISO 8601 format with timezone. Note: do NOT confuse 'objective' with 'intent'",
    )
    objective_end_time: Optional[datetime] = Field(
        None,
        description="End time of the objective in ISO 8601 format with timezone",
    )
    priority: int = Field(
        10,
        description="Priority level for scheduling (higher numbers indicate lower priority, defaults to 10)",
    )
    sort_by_brightest_uct: bool = Field(
        False,
        description="If True, submit intents for the brightest unobserved UCTs first",
    )
    objective_name: Optional[str] = Field(
        "UctObservationObjective",
        description="Name for this objective. Defaults to 'UctObservationObjective'",
    )


class BaselineAutonomyObjective(BaseModel):
    objective_uuid: str = Field(
        ...,
        description="Objective UUID generated by the belief state",
    )
    classification_marking: str = Field(
        "U",
        description="Classification level of objective intents. Choose from: U, C, S, TS, U//FOUO",
    )
    data_mode: str = Field(
        "REAL",
        description="String type for the Machina Common DataModeType. Choose from: TEST, REAL, SIMULATED, EXERCISE",
    )
    frame_type: str = Field(
        "LIGHT",
        description="Frame type for the objective",
    )
    priority: int = Field(
        1000,
        description="Priority level for scheduling (higher numbers indicate lower priority, defaults to 1000)",
    )
    baseline_autonomy_rso: str = Field(
        None,
        description="Comma separated string of catalog IDs to track. Note: these are NOT the RSO IDs.",
    )
    objective_end_time: Optional[datetime] = Field(
        None,
        description="End time of the objective, defaults to None for continuous running",
    )
    rso_id_list: Optional[List[str]] = Field(
        None,
        description="List of RSO IDs, to be overwritten at runtime",
    )
    objective_name: str = Field(
        "BaselineAutonomyObjective",
        description="Name for this objective. Defaults to 'BaselineAutonomyObjective'",
    )


class ChunkMetadata(BaseModel):
    source_files: List[str] = Field(
        ..., description="List of source JSON files contributing to this chunk"
    )
    json_keys_summary: List[str] = Field(
        ...,
        description="List of key names appearing in the chunk, providing a quick summary of the contents",
    )
    descriptive_labels: Dict[str, str] = Field(
        ...,
        description="Mapping of JSON keys to more understandable labels within the chunk, if applicable",
    )
    context_info: str = Field(
        None,
        description="Additional context or notes that describe the overall content of this chunk",
    )
    num_values: int = Field(
        ..., description="Number of JSON key-value pairs in the chunk"
    )
    priority_level: int = Field(
        1,
        ge=1,
        le=100,
        description="Indicates the priority level of the chunk. 1 is low priority and 100 is highest priority",
    )


class IntentStatusSummary(BaseModel):
    target_name: str = Field(..., description="Name of the target satellite")
    target_catalog_id: str = Field(
        ..., description="Catalog ID of the target satellite"
    )

    failed_count: int = Field(
        ..., ge=0, description="Number of intents with FAILED status"
    )
    scheduled_count: int = Field(
        ..., ge=0, description="Number of intents with SCHEDULED status"
    )
    completed_count: int = Field(
        ..., ge=0, description="Number of intents with COMPLETED status"
    )

    failure_reason: Optional[str] = Field(
        None, description="Common reason for failed intents"
    )

    priority: int = Field(..., ge=0, description="Priority level of the intents")

    frame_type: str = Field(..., description="Type of frame used in the observation")
    num_frames: int = Field(
        ..., ge=0, description="Number of frames in the observation"
    )
    integration_time_s: float = Field(
        ..., ge=0, description="Integration time in seconds"
    )
    track_type: str = Field(
        ..., description="Type of tracking used for the observation"
    )

    scheduling_process: str = Field(
        ..., description="Description of the typical scheduling process"
    )
    completion_note: Optional[str] = Field(
        None, description="Note on the completed intent, if any"
    )


class IntentAnalysisSummary(BaseModel):
    summary: IntentStatusSummary = Field(
        ..., description="Detailed summary of intent statuses"
    )
    total_intents: int = Field(
        ..., ge=0, description="Total number of intents analyzed"
    )
    analysis_date: str = Field(..., description="Date of the intent analysis")
